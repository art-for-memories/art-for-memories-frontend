// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid()) @map("_id")
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Memories {
  id        String   @id @default(cuid()) @map("_id")
  firstName String
  lastName  String
  email     String
  phone     String
  memory    String
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  MemoriesImage MemoriesImage[]
  MemoriesArt   MemoriesArt[]
}

model MemoriesImage {
  id        String   @id @default(cuid()) @map("_id")
  memoryId  String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  memory Memories @relation(fields: [memoryId], references: [id], onDelete: Cascade)
}

model MemoriesArt {
  id        String   @id @default(cuid()) @map("_id")
  memoryId  String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  memory Memories @relation(fields: [memoryId], references: [id], onDelete: Cascade)
}

model Story {
  id        String      @id @default(cuid()) @map("_id")
  firstName String
  lastName  String
  email     String
  phone     String
  storyType String
  title     String
  author    String
  date      DateTime
  status    String      @default("pending")
  image     String?
  StoryFile StoryFile[]
}

model StoryFile {
  id      String @id @default(cuid()) @map("_id")
  url     String
  story   Story  @relation(fields: [storyId], references: [id])
  storyId String
}

model Video {
  id        String   @id @default(cuid()) @map("_id")
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Art {
  id             String   @id @default(cuid()) @map("_id")
  name           String
  age            Int
  oldPhoto       String?
  preservedPhoto String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum Role {
  SUPERADMIN
  ADMIN
  USER
}
